/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Car;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-06T09:02:27.806Z")

@Api(value = "car", description = "the car API")
public interface CarApi {

    @ApiOperation(value = "Add a new car to the showroom", nickname = "addCar", notes = "", tags={ "car", })
    
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid input") })
    
    @RequestMapping(value = "/car",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    
    ResponseEntity<String> addCar(@ApiParam(value = "Car object that needs to be added to the showroom" ,required=true )  @Valid @RequestBody Car body);


    @ApiOperation(value = "Deletes a Car from Showroom", nickname = "deleteCar", notes = "", tags={ "car", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid Car Number supplied"),
        @ApiResponse(code = 404, message = "Car not found") })
    @RequestMapping(value = "/car/{carNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteCar(@ApiParam(value = "Car Number to delete",required=true) @PathVariable("carNumber") Long carNumber);


    @ApiOperation(value = "Finds cars by status", nickname = "findCarsByStatus", notes = "", response = Car.class, responseContainer = "List", tags={ "car", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Car.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/car/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Car>> findCarsByStatus(@NotNull @ApiParam(value = "", required = true, allowableValues = "available, sold") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find car by number", nickname = "getCarByNumber", notes = "Returns a single car", response = Car.class, tags={ "car", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Car.class),
        @ApiResponse(code = 400, message = "Invalid Car Number supplied"),
        @ApiResponse(code = 404, message = "Car not found") })
    @RequestMapping(value = "/car/{carNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Car> getCarByNumber(@ApiParam(value = "ID of car to return",required=true) @PathVariable("carNumber") Long carNumber);


    @ApiOperation(value = "Update an existing car", nickname = "updateCar", notes = "", tags={ "car", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Car not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/car",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCar(@ApiParam(value = "Car object that needs to be updated to the store" ,required=true )  @Valid @RequestBody Car body);

}
